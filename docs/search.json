[
  {
    "objectID": "index.html#sample-exhibition-catalogue",
    "href": "index.html#sample-exhibition-catalogue",
    "title": "Baroque TOC",
    "section": "Sample Exhibition Catalogue",
    "text": "Sample Exhibition Catalogue\nThis is a sample publication to demostrate the automation of the publishing process.\nHere you can find a step-by-step guide to make your own catalogue: Automating Exhibition Catalogue Creation — A Guide.\n2023-04-28 v1.0\n\nDescription\nAn exhibition catalogue prototype, created using an open-source computational publishing toolset. The objective was to test automatic retrieval of remote media and linked open data sources and then auto‑typeseting the collated publication as multi‑format. The prototype is available for community reuse to enable others to make their own publications and is accompanied by a step‑by‑step guide.\nA collaboration between Open Science Lab TIB, NFDI4Culture, and COPIM:\n\nNFDI4Culture Task Area 4: Which is looking at which initiatives are enhancing their publications for open scholarship. Its aim is to establish a guideline for scholars to create publications and their associated data with a focus on long-term digital preservation.\nCOPIM’s Computational Book Publishing Pilot Project: WP6 brings together publishers, technologists, researchers, and authors to devise strategies to promote experimental book publishing and the reuse of, and engagement with, open access books.\n\n\n\nCite as \nDocument DOI: 10.5281/zenodo.7876062\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\nBook cover: Reworking of Baroque pearl with enamelled gold mounts set with rubies. Creative Commons CC0 1.0 Universal Public Domain Dedication. This file was donated to Wikimedia Commons as part of a project by the Metropolitan Museum of Art. And, Venus and Cupid, Heinrich Bollandt, between circa 1620 and circa 1630. Bavarian State Painting Collections. This work is in the public domain."
  },
  {
    "objectID": "colophon.html",
    "href": "colophon.html",
    "title": "Colophon",
    "section": "",
    "text": "Sample colophon data retrieved from Thoth.pub API book publication metadata system.\n\nCode\nfrom thothlibrary import ThothClient\nfrom datetime import datetime\nimport json\n\n# variables\nwork ='9bf5f52e-6d99-4d62-bcc5-c57b07efa3f0'\n\n# calling the Thoth GraphQL API\nthoth = ThothClient()\nresponse = thoth.work_by_id(work_id=work, raw='true')\ndata = json.loads(response)\n\nprint(data['data']['work']['title'].upper())\nprint(data['data']['work']['subtitle'].upper())\nprint('\\r')\nprint(data['data']['work']['imprint']['publisher']['publisherName'])\nprint(data['data']['work']['place'])\nprint('\\r')\nprint('First published ' + data['data']['work']['publicationDate'])\nprint('\\r')\nprint('Copyright © ' + data['data']['work']['copyrightHolder'] + ' ' + data['data']['work']['publicationDate'][:4])\nprint('Licensed as ' + data['data']['work']['license'])\nprint('\\r')\nprint('DOI: ' + data['data']['work']['doi'])\n\nPUBLISHING FROM COLLECTIONS USES OF COMPUTATIONAL PUBLISHIGN AND LINKEDOPEN DATA\nOpen Science Lab - TIB Hannnover\nFirst published 2023-03-30\nCopyright © The Authors 2023 Licensed as https://creativecommons.org/licenses/by-sa/4.0/\nDOI: https://doi.org/10.5281/zenodo.7701161"
  },
  {
    "objectID": "essay.html",
    "href": "essay.html",
    "title": "Catalogue Essay",
    "section": "",
    "text": "Article taken from Wikipedia: Baroque\nThe Baroque (UK: /bəˈrɒk/, US: /bəˈroʊk/; French: [baʁɔk]) is a style of architecture, music, dance, painting, sculpture, poetry, and other arts that flourished in Europe from the early 17th century until the 1750s. In the territories of the Spanish and Portuguese empires including the Iberian Peninsula it continued, together with new styles, until the first decade of the 19th century. It followed Renaissance art and Mannerism and preceded the Rococo (in the past often referred to as “late Baroque”) and Neoclassical styles. It was encouraged by the Catholic Church as a means to counter the simplicity and austerity of Protestant architecture, art, and music, though Lutheran Baroque art developed in parts of Europe as well.\nThe Baroque style used contrast, movement, exuberant detail, deep colour, grandeur, and surprise to achieve a sense of awe. The style began at the start of the 17th century in Rome, then spread rapidly to France, northern Italy, Spain, and Portugal, then to Austria, southern Germany, and Poland. By the 1730s, it had evolved into an even more flamboyant style, called rocaille or Rococo, which appeared in France and Central Europe until the mid to late 18th century.\nIn the decorative arts, the style employs plentiful and intricate ornamentation. The departure from Renaissance classicism has its own ways in each country. But a general feature is that everywhere the starting point is the ornamental elements introduced by the Renaissance. The classical repertoire is crowded, dense, overlapping, loaded, in order to provoke shock effects. New motifs introduced by Baroque are: the cartouche, trophies and weapons, baskets of fruit or flowers, and others, made in marquetry, stucco, or carved."
  },
  {
    "objectID": "paintings.html",
    "href": "paintings.html",
    "title": "Bavarian State Painting Collection",
    "section": "",
    "text": "An example notebook retreiving a sample of nine paintings via Wikidata from the Bavarian State Painting Collection. Here is the SPARQL query used in the Code section below. https://w.wiki/6VCz.\nThe notebooks is a sample 9 paintings from the Baroque period.\nThe complete collection is here on Wikidata.\nThe below Python code uses SPARQLWrapper to retrieve data from Wikidata based on a SPARQL query.\n\nCode\nfrom SPARQLWrapper import SPARQLWrapper, JSON\nfrom PIL import Image\nimport requests\n\n# VARIABLES\n\nsparql_endpoint_url = 'https://query.wikidata.org/bigdata/namespace/wdq/sparql'\nwikibase_url = 'https://www.wikidata.org'\napi_url = '/w/api.php'\n\n# Wikidata requires a user agent header to prevent spam requests\nuser_agent = 'Ex_Books_conference_bot/0.0 (https://github.com/SimonXIX/Experimental_Books_workshop; ad7588@coventry.ac.uk)'\n\n# SPARQL query\n# see in Wikidata's Query Service GUI at:\n# https://w.wiki/6VCz\nquery = \"\"\"\n#defaultView:ImageGrid\nSELECT ?item ?itemLabel ?inceptionyear ?creator ?creatorLabel ?copyright ?copyrightLabel ?image\nWHERE\n{\n  # find items which:\n  # are instances of (wdt:P31) paintings (wd:Q3305213)\n  # have the property (wdt:P195) of being in collection wd:Q812285 (Bavarian State Painting Collections)\n  ?item wdt:P31 wd:Q3305213 .\n  ?item wdt:P195 wd:Q812285 .\n  # get the item's creator property (wdt:P170)\n  ?item wdt:P170 ?creator .\n  # get the item's image property (wdt:P18)\n  ?item wdt:P18 ?image .\n  # get the item's copyright status (wdt:P6216)\n  ?item wdt:P6216 ?copyright . \n  {\n    ?item wdt:P571 ?inception.\n    BIND(YEAR(?inception) AS ?inceptionyear)\n  }\n\n  # filter out all paintings not created between the years 1600 and 1700\n  FILTER((1600  <= ?inceptionyear) && (?inceptionyear < 1700 ))\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }\n# limit to nine results\nLIMIT 9\n\"\"\"\n\n# SUBROUTINES\n\ndef get_delay(date):\n    try:\n        date = datetime.datetime.strptime(date, '%a, %d %b %Y %H:%M:%S GMT')\n        timeout = int((date - datetime.datetime.now()).total_seconds())\n    except ValueError:\n        timeout = int(date)\n    return timeout\n\ndef get_image(url, headers):\n    r = requests.get(url, headers=headers, stream=True)\n    if r.status_code == 200:\n        im = Image.open(r.raw)\n        return im\n    if r.status_code == 500:\n        return None\n    if r.status_code == 403:\n        return None\n    if r.status_code == 429:\n        timeout = get_delay(r.headers['retry-after'])\n        print('Timeout {} m {} s'.format(timeout // 60, timeout % 60))\n        time.sleep(timeout)\n        get_image(url, headers)\n\n# MAIN PROGRAM\n\n# create SPARQL query\nsparql = SPARQLWrapper(sparql_endpoint_url, agent=user_agent)\n\n# retrieve results and convert to JSON format\nsparql.setQuery(query)\nsparql.setReturnFormat(JSON)\nresult = sparql.query().convert()\n\n# for each result, print various data fields\nfor item in result['results']['bindings']:\n    print('Wikidata link: ' + '[' + item['item']['value'] + ']' + '(' + item['item']['value'] + ')' + '\\n')\n    print('Title: ' + item['itemLabel']['value'] + '\\n')\n    print('Year: ' + item['inceptionyear']['value'] + '\\n')\n    print('Creator: ' + item['creatorLabel']['value'] + '\\n')\n    print('Copyright: ' + item['copyrightLabel']['value'] + '\\n')\n\n    # get image from image URL and display resized version\n    image_url=item['image']['value']\n    headers = {'User-Agent': 'Ex_Books_conference_bot/0.0 (https://github.com/SimonXIX/Experimental_Books_workshop; ad7588@coventry.ac.uk)'}\n    im = get_image(image_url, headers)\n    im.thumbnail((500, 500), Image.Resampling.LANCZOS)\n    display(im)\n    print('\\n\\n')\n\nWikidata link: http://www.wikidata.org/entity/Q29474642\nTitle: The Birth of Benjamin\nYear: 1650\nCreator: Francesco Furini\nCopyright: public domain\n\nWikidata link: http://www.wikidata.org/entity/Q29474649\nTitle: A Cynical Philosopher\nYear: 1650\nCreator: Luca Giordano\nCopyright: public domain\n\nWikidata link: http://www.wikidata.org/entity/Q29474651\nTitle: Solomon and the Queen of Sheba\nYear: 1697\nCreator: Luca Giordano\nCopyright: public domain\n\nWikidata link: http://www.wikidata.org/entity/Q29477235\nTitle: Q29477235\nYear: 1674\nCreator: Antonio Triva\nCopyright: public domain\n\nWikidata link: http://www.wikidata.org/entity/Q29477863\nTitle: Q29477863\nYear: 1633\nCreator: Guido Reni\nCopyright: public domain\n\nWikidata link: http://www.wikidata.org/entity/Q29477898\nTitle: Still-Life with Books\nYear: 1628\nCreator: Jan Lievens\nCopyright: public domain\n\nWikidata link: http://www.wikidata.org/entity/Q29480557\nTitle: Feast of Herod\nYear: 1630\nCreator: http://www.wikidata.org/.well-known/genid/3f945710e81609ba4bae458b2820460a\nCopyright: public domain\n\nWikidata link: http://www.wikidata.org/entity/Q29480565\nTitle: Venus and Cupid\nYear: 1625\nCreator: Heinrich Bollandt\nCopyright: public domain\n\nWikidata link: http://www.wikidata.org/entity/Q29480594\nTitle: Still-life with Parrot\nYear: 1630\nCreator: Georg Flegel\nCopyright: public domain"
  },
  {
    "objectID": "video-3d.html#video-embedding",
    "href": "video-3d.html#video-embedding",
    "title": "Embedded video and 3D",
    "section": "Video embedding",
    "text": "Video embedding\nThe below Python code experiments with retrieving video data via iframe embedding. Video from TIB AV Portal.\n\nCode\nfrom IPython.display import HTML\nHTML(\"\"\"\n<iframe width=\"600\" height=\"315\" scrolling=\"no\" src=\"https://av.tib.eu/player/56162\" frameborder=\"0\" allowfullscreen></iframe>\n\"\"\")"
  },
  {
    "objectID": "video-3d.html#d-model-embedding",
    "href": "video-3d.html#d-model-embedding",
    "title": "Embedded video and 3D",
    "section": "3D model embedding",
    "text": "3D model embedding\nThe below Python code experiments with retrieving 3D data via iframe embedding. 3D models from demo instance of Semantic Kompakkt at kompakkt.wbworkshop.tibwiki.io\n\nCode\nfrom IPython.display import HTML\nHTML(\"\"\"\n<iframe\n  width=\"600\" height=\"315\"\n  name=\"Cube STL\"\n  src=\"https://kompakkt.wbworkshop.tibwiki.io/viewer/?entity=63e91957f3dcab9b642046ce&mode=open\"\n  allowfullscreen\n  loading=\"lazy\"\n></iframe>\n\"\"\")\n\n\n\n\nCode\nfrom IPython.display import HTML\nHTML(\"\"\"\n<iframe\n  width=\"600\" height=\"315\"\n  name=\"Monopterus Schloss Monaise Trier Temple\"\n  src=\"https://kompakkt.wbworkshop.tibwiki.io/viewer/?entity=63e8d2fbfbc272b762204e1c&mode=open\"\n  allowfullscreen\n  loading=\"lazy\"\n></iframe>\n\"\"\")"
  }
]